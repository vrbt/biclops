package utils

import com.github.vrbt.biclops.utils.ByteBufferUtils
import com.google.common.primitives.Ints
import com.google.common.primitives.Longs
import spock.lang.Specification
import spock.lang.Unroll

import java.nio.ByteBuffer

/**
 * Created by Robert on 2016-06-11.
 */
class ByteBufferUtilsTest extends Specification {

    @Unroll
    def 'cyclic left shift of integers'() {
        given:
        def buffer = ByteBuffer.wrap Ints.toByteArray(originalValue)

        when:
        def shiftedBuffer = ByteBufferUtils.leftShift(buffer, shift)
        def result = Ints.fromByteArray shiftedBuffer.array()

        then:
        result == shiftedValue

        where:
        originalValue                             | shift | shiftedValue
        //if not for cast, the predefined value would be interpreted as long (longer than int) which would make it positive, when result is negative
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 0     | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 2     | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 4     | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 8     | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 16    | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0000 | 32    | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 0     | 0b0000_0000_0000_0000_0000_0000_0000_0001 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 1     | 0b0000_0000_0000_0000_0000_0000_0000_0010 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 4     | 0b0000_0000_0000_0000_0000_0000_0001_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 8     | 0b0000_0000_0000_0000_0000_0001_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 16    | 0b0000_0000_0000_0001_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 31    | 0b1000_0000_0000_0000_0000_0000_0000_0000 as int
        0b0000_0000_0000_0000_0000_0000_0000_0001 | 32    | 0b0000_0000_0000_0000_0000_0000_0000_0000 as int
    }

    @Unroll
    def 'cyclic left shift of longs'() {
        given:
        def buffer = ByteBuffer.wrap Longs.toByteArray(originalValue)

        when:
        def shiftedBuffer = ByteBufferUtils.leftShift(buffer, shift)
        def result = Longs.fromByteArray shiftedBuffer.array()

        then:
        result == (long) shiftedValue

        where:
        originalValue                                                                     | shift | shiftedValue
        //if not for cast, the predefined value would be interpreted as BigInt (longer than long) which would make it positive, when result is negative, dynamic typing strikes again
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 0     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 2     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 4     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 8     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 16    | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 32    | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 | 64    | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 0     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 1     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0010 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 4     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 8     | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 16    | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 32    | 0b0000_0000_0000_0000_0000_0000_0000_0001_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 60    | 0b0001_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 63    | 0b1000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
        0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0001 | 64    | 0b0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000_0000 as long
    }
}